#! /usr/bin/env node

import path from 'node:path'
import { parseArgs, inspect } from 'node:util'
import { splitPerProgramWithSingleSharedData } from '../src/split-esm.mjs'

/** @type { import('node:util').ParseArgsConfig} */
const parser = {
    allowPositionals: true,
    options: {
        // TODO add support for report=json
        report: { type: 'string', default: 'stdout' },
        'dry-run': { type: 'boolean', default: false },
    },
}

try {
    const { positionals: files, values: config } = parseArgs(parser)
    console.log('parsed', { files, config })

    if (!Array.isArray(files) || files.length === 0) {
        console.error('I need at least one file to operate on.')
        process.exit(1)
    }

    const genericError = 'I can only split a `.js` file generated by the Elm compiler.'
    for (const file of files) {
        let fileExtension = path.extname(file)
        switch (fileExtension) {
            case '.elm':
                console.error(genericError)
                console.error(`Run e.g. \`elm make --output=bundle.js ${files.join(' ')}\` first.`)
                process.exit(1)
            case '.js':
                /** @type {import('../src/types/public').SideEffects} */
                const config = {
                    printLogs: report === 'stdout',
                    writeFiles: config['dry-run'],
                }
                await splitPerProgramWithSingleSharedData(file)
                break
            default:
                console.error(`
I don't know what to do with a \`${fileExtension}\` file.`)
                console.error(genericError)
                process.exit(1)
        }
    }
} catch (ex) {
    console.error(ex instanceof Error ? ex.message : ex)
    process.exit(1)
}
