#! /usr/bin/env node

import path from 'node:path'
import { parseArgs, inspect } from 'node:util'
import { splitPerProgramWithSingleSharedData } from '../src/main.mjs'

/** @type { import('node:util').ParseArgsConfig} */
const parser = {
    allowPositionals: true,
    options: {
        report: { type: 'string', default: 'stdout' },
        'dry-run': { type: 'boolean', default: false },
        help: { type: 'boolean', default: false, short: 'h' },
    },
}

function printHelp() {
    console.log('\nUsage:')
    const script = path.basename(import.meta.url, '.mjs')
    console.log(`  ${script} <options> <path/to/bundle.js>`)
    console.log('\nWith <options> one of')
    console.log('  `--report=stdout` (default) will print log messages')
    console.log(
        '  `--report=json` will not print immediate logs, but only one JSON report in the end',
    )
    console.log('  `--dry-run` disables writing files to disk')
    console.log()
}

try {
    const { positionals: files, values: config } = parseArgs(parser)

    if (config.help) {
        printHelp()
        process.exit(0)
    }

    if (!Array.isArray(files) || files.length === 0) {
        console.error('You need to pass at least one .js file generated by the Elm compiler.')
        printHelp()
        process.exit(1)
    }

    const report = typeof config.report === 'string' ? config.report : String(config.report)
    const allowedReport = ['stdout', 'json']
    if (!allowedReport.includes(report)) {
        console.error(`\`--report=${config.report}\` is not supported.`)
        console.error('Pick one of these instead:', allowedReport.join(', '))
        process.exit(1)
    }

    /** @type {import('../src/types/public.js').SideEffects} */
    const effects = {
        printLogs: report !== 'json',
        writeFiles: !config['dry-run'],
    }

    const genericError = 'I can only split a `.js` file generated by the Elm compiler.'
    for (const file of files) {
        let fileExtension = path.extname(file)
        switch (fileExtension) {
            case '.elm':
                console.error(genericError)
                console.error(`Run e.g. \`elm make --output=bundle.js ${files.join(' ')}\` first.`)
                process.exit(1)
            case '.js':
                const result = await splitPerProgramWithSingleSharedData(file, effects)
                if (report === 'json') {
                    console.log(JSON.stringify(result, undefined, 2))
                }
                break
            default:
                console.error(`
I don't know what to do with a \`${fileExtension}\` file.`)
                console.error(genericError)
                process.exit(1)
        }
    }
} catch (ex) {
    console.error(ex instanceof Error ? ex.message : ex)
    process.exit(1)
}
